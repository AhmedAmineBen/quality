<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Analyse ABC/XYZ Pro</title>
    
    <!-- Frameworks -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@mdi/font@7.2.96/css/materialdesignicons.min.css"
    />
    
    <style>
      :root {
        --primary-500: #6366f1;
        --primary-600: #4f46e5;
        --surface-50: #f8fafc;
        --surface-100: #f1f5f9;
        --success-500: #22c55e;
        --danger-500: #ef4444;
        --glass-bg: rgba(255, 255, 255, 0.95);
        --border-color: rgba(203, 213, 225, 0.3);
        --header-gradient: linear-gradient(45deg, #0d6efd, #0a58ca);
      }
    
      body {
        font-family: 'Poppins', system-ui, -apple-system, sans-serif;
        background: linear-gradient(135deg, var(--surface-50), var(--surface-100));
        min-height: 100vh;
        color: #212529;
      }
    
      .main-container {
        max-width: 900px;
        padding: 2rem 1rem;
        margin: auto;
      }
    
      header {
        text-align: center;
        padding: 2rem 0;
      }
    
      /* Style du titre */
      .main-title {
        font-weight: 700;
        letter-spacing: -0.5px;
        background: var(--header-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-size: 3rem;
      }
    
      /* Sous-titre */
      .fs-4 {
        font-size: 1.1rem;
        line-height: 1.5;
        padding-bottom: 1rem;
      }
    
      /* Effet Glass Panel */
      .glass-panel {
        background: var(--glass-bg);
        backdrop-filter: blur(12px);
        border: 1px solid var(--border-color);
        box-shadow: 0 8px 32px rgba(31, 38, 135, 0.05);
        border-radius: 1.5rem;
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      .glass-panel:hover {
        transform: translateY(-2px);
      }
    
      /* Style des cartes d'analyse */
      .analysis-card {
        border: none;
        border-radius: 1rem;
        background: #fff;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        margin-bottom: 1.5rem;
      }
      .analysis-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
      }
    
      /* Options d'analyse */
      .analysis-option {
        padding: 1.25rem;
        border-radius: 0.75rem;
        border: 1px solid #ccc; /* Bordure grise moderne */
        transition: background-color 0.2s ease;
        cursor: pointer;
        margin-bottom: 1rem;
      }
      .analysis-option:hover {
        background-color: rgba(13, 110, 253, 0.1);
        border-color: var(--primary-500);
      }
      .option-title {
        font-weight: 500;
        color: var(--primary-500);
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
      }
      .option-description {
        color: #6c757d;
        font-size: 0.95rem;
        line-height: 1.5;
      }
    
      /* Section ABC – masquée par défaut */
      #abcCustomization {
        display: none;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid var(--border-color);
      }
      #abcCustomization .form-label {
        font-weight: 500;
        margin-bottom: 1rem;
      }
      /* Inputs minimalistes pour ABC */
      #abcCustomization .input-group-text {
        background: transparent;
        border: none;
        border-bottom: 2px solid #eee;
        padding: 0.75rem 1rem;
        color: #6c757d;
      }
      #abcCustomization .form-control {
        background: #f7f7f7;
        border: none;
        border-bottom: 2px solid #eee;
        border-radius: 0;
        padding: 0.75rem 1rem;
        transition: border-color 0.3s, box-shadow 0.3s;
      }
      #abcCustomization .form-control:focus {
        border-bottom: 2px solid var(--primary-500);
        box-shadow: none;
      }
      #sumAlert {
        font-size: 0.9rem;
      }
    
      /* Navigation par onglets – boutons de sélection */
      .nav-tabs {
        justify-content: center;
        border-bottom: none;
      }
      .nav-tabs .nav-link {
        font-weight: 600;
        padding: 0.75rem 2rem;
        border: 2px solid transparent;
        border-radius: 30px;
        transition: all 0.3s ease;
        margin: 0 0.5rem;
        background: var(--surface-50);
        color: #6c757d;
      }
      .nav-tabs .nav-link.active {
        background: var(--primary-500);
        color: #fff;
        border-color: var(--primary-500);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      .nav-tabs .nav-link:hover:not(.active) {
        background: #e2e8f0;
        border-color: var(--primary-500);
        color: var(--primary-500);
      }
    
      /* Sélecteur de fichier personnalisé */
      .custom-file-upload label {
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
        padding: 0.75rem 1.5rem;
        border-radius: 50rem;
      }
      .custom-file-upload label:hover {
        background-color: var(--primary-500);
        color: #fff;
        transform: scale(1.03);
      }
    
      .drag-drop-zone {
        border: 2px dashed #cbd5e1;
        border-radius: 1rem;
        background: rgba(241, 245, 249, 0.5);
        transition: all 0.3s ease;
      }
      .drag-drop-zone.dragover {
        border-color: var(--primary-500);
        background: rgba(99, 102, 241, 0.05);
      }
      .file-format-hint {
        font-size: 0.9rem;
        color: #64748b;
        margin-top: 0.5rem;
      }
      .confirmation-badge {
        background: rgba(34, 197, 94, 0.1);
        border: 1px solid var(--success-500);
        color: var(--success-500);
        transition: all 0.3s ease;
      }
      .floating-action {
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
      }
      .floating-action:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px -1px rgba(0, 0, 0, 0.15);
      }
      .input-highlight:focus {
        border-color: var(--primary-500);
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
      }
    </style>
  </head>
  <body class="d-flex flex-column">
    <div class="container py-4 my-auto">
      <!-- En-tête -->
      <header class="text-center mb-3">
        <h1 class="display-4 fw-bold mb-3 main-title">
          Diagramme Pareto <br /> - Analyse ABC -
        </h1>
        <div class="fs-4 text-muted mt-2">
          Obtenez une vue synthétique des facteurs clés et priorisez vos actions efficacement
        </div>
        <a href="/landing">
          <button type="button" class="btn btn-outline-secondary mdi mdi-arrow-left" style="margin-top: 1rem;"> Retour à l'accueil</button>
        </a>
      </header>
              
      <form action="/upload" method="POST" enctype="multipart/form-data">
        <div class="row g-4 justify-content-center">
          <!-- Configuration d'analyse -->
          <div class="col-lg-6">
            <div class="glass-panel p-4 mb-4">
              <h3 class="h5 fw-semibold mb-4 d-flex align-items-center">
                <i class="mdi mdi-cog-outline text-primary me-2"></i>
                Configuration d'analyse
              </h3>
              <div class="vstack gap-3">
                <!-- Option Gini -->
                <label class="analysis-option p-3">
                  <div class="form-check d-flex align-items-center">
                    <input class="form-check-input" type="radio" name="analysisType" value="gini" id="giniRadio" checked>
                    <div class="ms-3">
                      <div class="d-flex align-items-center mb-1">
                        <!-- Icône supprimée -->
                        <span class="fw-semibold">Mode Automatique</span>
                      </div>
                      <small class="text-muted">Classification basée sur l'indice de Gini</small>
                    </div>
                  </div>
                </label>
                <!-- Option ABC -->
                <label class="analysis-option p-3">
                  <div class="form-check d-flex align-items-center">
                    <input class="form-check-input" type="radio" name="analysisType" value="abc" id="abcRadio">
                    <div class="ms-3">
                      <div class="d-flex align-items-center mb-1">
                        <!-- Icône supprimée -->
                        <span class="fw-semibold">Mode Personnalisé</span>
                      </div>
                      <small class="text-muted">Définissez vos propres paramètres</small>
                    </div>
                  </div>
                  <!-- Configuration ABC -->
                  <div id="abcCustomization" class="mt-4 pt-3 border-top" style="display: none;">
                    <div class="row g-3">
                      <div class="col-12">
                        <label class="form-label fw-semibold">Répartition des classes</label>
                        <div class="vstack gap-2">
                          <div class="input-group">
                            <span class="input-group-text w-40">Classe A</span>
                            <input type="number" class="form-control input-highlight" name="classA" step="0.1" required>
                            <span class="input-group-text">%</span>
                          </div>
                          <div class="input-group">
                            <span class="input-group-text w-40">Classe B</span>
                            <input type="number" class="form-control input-highlight" name="classB" step="0.1" required>
                            <span class="input-group-text">%</span>
                          </div>
                          <div class="input-group">
                            <span class="input-group-text w-40">Classe C</span>
                            <input type="number" class="form-control input-highlight" name="classC" step="0.1" required>
                            <span class="input-group-text">%</span>
                          </div>
                        </div>
                        <div class="mt-3 alert alert-danger py-2" id="sumAlert" style="display: none;">
                          Total : <strong><span id="totalSum">0.0</span>%</strong> - Doit faire exactement 100%
                        </div>
                      </div>
                    </div>
                  </div>
                </label>
              </div>
            </div>
          </div>
          
          <!-- Importation des données -->
          <div class="col-lg-6">
            <div class="glass-panel p-4">
              <h3 class="h5 fw-semibold mb-4 d-flex align-items-center">
                <i class="mdi mdi-database-import text-primary me-2"></i>
                Source des données
              </h3>
              <!-- Boutons de sélection (Onglets) -->
              <ul class="nav nav-tabs mb-4" id="importTabs" role="tablist">
                <li class="nav-item" role="presentation">
                  <button class="nav-link active" id="file-tab" data-bs-toggle="tab" data-bs-target="#filePane" type="button">
                    <i class="mdi mdi-file-upload-outline me-2"></i>
                    Fichier
                  </button>
                </li>
                <li class="nav-item" role="presentation">
                  <button class="nav-link" id="manual-tab" data-bs-toggle="tab" data-bs-target="#manualPane" type="button">
                    <i class="mdi mdi-keyboard-outline me-2"></i>
                    Manuel
                  </button>
                </li>
              </ul>
      
              <div class="tab-content">
                <!-- Onglet Fichier -->
                <div class="tab-pane fade show active" id="filePane">
                  <div class="drag-drop-zone p-5 text-center position-relative">
                    <i class="mdi mdi-cloud-upload-outline display-4 text-muted mb-3"></i>
                    <div class="mb-3">
                      <input type="file" class="form-control" name="datafile" id="fileInput" accept=".csv, .xlsx" hidden>
                      <label for="fileInput" class="btn btn-lg btn-primary floating-action">
                        <i class="mdi mdi-file-import me-2"></i>
                        Sélectionner un fichier
                      </label>
                      <div class="file-format-hint">
                        Formats autorisés : CSV, XLSX (Excel)
                      </div>
                    </div>
                    <div id="fileStatus" class="text-muted small mt-2">
                      Aucun fichier sélectionné
                    </div>
                  </div>
                </div>
      
                <!-- Onglet Manuel -->
                <div class="tab-pane fade" id="manualPane">
                  <div class="vstack gap-3">
                    <div id="inputRows" class="mb-3">
                      <div class="dynamic-input-row row g-2 mb-2">
                        <div class="col-7">
                          <input type="text" class="form-control input-highlight" name="problem[]" placeholder="Nom de l'article" required>
                        </div>
                        <div class="col-3">
                          <input type="number" class="form-control input-highlight" name="frequency[]" placeholder="Quantité" min="1" required 
                                 onkeydown="if(event.key === 'e' || event.key === 'E' || event.key === '+' || event.key === '-') event.preventDefault();" >
                        </div>
                        <div class="col-2">
                          <button type="button" class="btn btn-danger w-100 floating-action" onclick="removeRow(this)" disabled>
                            <i class="mdi mdi-minus"></i>
                          </button>
                        </div>
                      </div>
                    </div>
                    <button type="button" class="btn btn-outline-primary floating-action" onclick="addRow()">
                      <i class="mdi mdi-plus-circle-outline me-2"></i>
                      Ajouter une entrée
                    </button>
                    <div class="confirmation-badge p-3 rounded-2 mt-3" id="confirmationBox" style="display: none;">
                      <div id="confirmSection">
                        <button type="button" class="btn btn-success w-100 floating-action" id="confirmDataBtn" onclick="confirmData()">
                          <i class="mdi mdi-check-circle me-2"></i>
                          Confirmer les données saisies
                        </button>
                      </div>
                      <div id="confirmedSection" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center">
                          <div class="d-flex align-items-center text-success">
                            <i class="mdi mdi-check-decagram me-2"></i>
                            Données validées avec succès
                          </div>
                          <div>
                            <button type="button" class="btn btn-sm btn-warning me-2 floating-action" onclick="editData()">
                              <i class="mdi mdi-pencil"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-danger floating-action" onclick="deleteData()">
                              <i class="mdi mdi-trash-can"></i>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
      
              <!-- Bouton de soumission -->
              <div class="d-grid mt-4">
                <button type="submit" class="btn btn-primary btn-lg py-3 floating-action">
                  <i class="mdi mdi-rocket-launch-outline me-2"></i>
                  Exécuter l'analyse
                </button>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
      
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      let isDataConfirmed = false;
      
      // Gestion du changement d'onglet pour la source des données
      document.addEventListener("DOMContentLoaded", () => {
        const importTabs = document.querySelectorAll("#importTabs button");
        importTabs.forEach((tab) => {
          tab.addEventListener("shown.bs.tab", function (event) {
            if (event.target.id === "manual-tab") {
              // Lorsque l'onglet Manuel est activé, vider le champ fichier et activer la saisie manuelle
              const fileInput = document.getElementById("fileInput");
              fileInput.value = "";
              updateFileName(fileInput);
              toggleManualInput(false);
            }
            // Pour l'onglet Fichier, on ne désactive pas systématiquement la saisie manuelle
          });
      
          // Attacher l'écouteur sur le champ fichier
          document.getElementById("fileInput").addEventListener("change", function(e) {
            const file = e.target.files[0];
            if (file) {
              const fileExtension = file.name.split('.').pop().toLowerCase();
              if (!['csv', 'xlsx'].includes(fileExtension)) {
                alert('Format non supporté. Veuillez utiliser un fichier CSV ou Excel.');
                e.target.value = '';
                return;
              }
            }
            updateFileName(e.target);
          });
      
          // Gestion de la saisie manuelle (ajout des écouteurs sur les inputs existants)
          document.querySelectorAll("#inputRows input").forEach((input) => {
            input.addEventListener("input", handleManualInput);
          });
      
          // Gestion du mode ABC personnalisé
          toggleAnalysisType();
          document.querySelectorAll('input[name="analysisType"]').forEach((radio) => {
            radio.addEventListener("change", toggleAnalysisType);
          });
        });
      });
      
      // Mise à jour du nom du fichier sélectionné
      function updateFileName(input) {
        const fileStatus = document.getElementById("fileStatus");
        const hasFile = input.files.length > 0;
        fileStatus.innerHTML = hasFile
          ? '<i class="mdi mdi-file-check me-2"></i>' + input.files[0].name
          : 'Aucun fichier sélectionné';
        // Si un fichier est sélectionné, désactiver la saisie manuelle
        toggleManualInput(hasFile);
        if (hasFile) {
          // Masquer la confirmation manuelle et marquer que les données sont validées
          document.getElementById("confirmationBox").style.display = "none";
          isDataConfirmed = true;
        }
      }
      
      // Fonction pour activer/désactiver la saisie manuelle
      function toggleManualInput(disabled) {
        document.querySelectorAll("#inputRows input, #inputRows button").forEach((el) => {
          el.disabled = disabled;
          if (disabled) el.value = "";
        });
        const addButton = document.querySelector('button[onclick="addRow()"]');
        if (addButton) addButton.disabled = disabled;
      }
      
      // Réinitialiser les champs de saisie manuelle
      function clearManualInputs() {
        document.getElementById("inputRows").innerHTML =
          '<div class="row g-2 mb-2">' +
            '<div class="col-7">' +
              '<input type="text" class="form-control input-highlight" name="problem[]" placeholder="Nom de l\'article" required>' +
            '</div>' +
            '<div class="col-3">' +
              '<input type="number" class="form-control input-highlight" name="frequency[]" placeholder="Quantité" required min="1" onkeydown="if(event.key === \'e\' || event.key === \'E\' || event.key === \'+\' || event.key === \'-\') event.preventDefault();">' +
            '</div>' +
            '<div class="col-2">' +
              '<button type="button" class="btn btn-danger w-100 floating-action" onclick="removeRow(this)" disabled>' +
                '<i class="mdi mdi-minus"></i>' +
              '</button>' +
            '</div>' +
          '</div>';
        isDataConfirmed = false;
        document.getElementById("confirmationBox").style.display = "none";
      }
      
      function updateRemoveButtons() {
        const rows = document.querySelectorAll("#inputRows .row");
        if (rows.length === 1) {
          rows[0].querySelector("button").disabled = true;
        } else {
          rows.forEach((row) => {
            row.querySelector("button").disabled = false;
          });
        }
      }
      
      function addRow() {
        if (isDataConfirmed) return;
        const firstRow = document.querySelector("#inputRows .row");
        const newRow = firstRow.cloneNode(true);
        newRow.querySelectorAll("input").forEach((input) => (input.value = ""));
        const qtyInput = newRow.querySelector('input[name="frequency[]"]');
        qtyInput.setAttribute("onkeydown", "if(event.key === 'e' || event.key === 'E' || event.key === '+' || event.key === '-') event.preventDefault();");
        document.getElementById("inputRows").appendChild(newRow);
        updateRemoveButtons();
        checkManualInput();
        newRow.querySelectorAll("input").forEach((input) => {
          input.addEventListener("input", handleManualInput);
        });
      }
      
      function removeRow(button) {
        if (isDataConfirmed) return;
        const rows = document.querySelectorAll("#inputRows .row");
        if (rows.length > 1) {
          button.closest(".row").remove();
          updateRemoveButtons();
          checkManualInput();
        }
      }
      
      function confirmData() {
        if (validateManualData()) {
          isDataConfirmed = true;
          document.getElementById("confirmSection").style.display = "none";
          document.getElementById("confirmedSection").style.display = "block";
          document.querySelectorAll("#inputRows input, #inputRows button").forEach(
            (el) => (el.disabled = true)
          );
        }
      }
      
      function validateManualData() {
        const inputs = document.querySelectorAll("#inputRows input");
        let isValid = true;
        inputs.forEach((input) => {
          if (!input.value.trim()) {
            isValid = false;
            input.classList.add("is-invalid");
          } else {
            input.classList.remove("is-invalid");
          }
        });
        if (!isValid) {
          alert("Veuillez remplir tous les champs requis");
          return false;
        }
        return true;
      }
      
      function editData() {
        isDataConfirmed = false;
        document.querySelectorAll("#inputRows input, #inputRows button").forEach(
          (el) => (el.disabled = false)
        );
        document.getElementById("confirmSection").style.display = "block";
        document.getElementById("confirmedSection").style.display = "none";
      }
      
      function deleteData() {
        clearManualInputs();
        document.getElementById("confirmSection").style.display = "block";
        document.getElementById("confirmedSection").style.display = "none";
      }
      
      function checkManualInput() {
        const hasData = Array.from(document.querySelectorAll('[name="problem[]"]')).some(
          (input) => input.value.trim() !== ""
        );
        document.getElementById("confirmationBox").style.display = hasData ? "block" : "none";
      }
      
      function handleManualInput() {
        checkManualInput();
      }
      
      document.querySelectorAll("#inputRows input").forEach((input) => {
        input.addEventListener("input", handleManualInput);
      });
      
      // Gestion du mode ABC personnalisé
      function toggleAnalysisType() {
        const abcSection = document.getElementById("abcCustomization");
        const isABC = document.getElementById("abcRadio").checked;
        abcSection.style.display = isABC ? "block" : "none";
        const abcInputs = document.querySelectorAll("#abcCustomization input");
        const submitButton = document.querySelector('button[type="submit"]');
        if (isABC) {
          abcInputs.forEach((input) => {
            input.removeAttribute("disabled");
            input.required = true;
          });
          submitButton.disabled = !validateABCPercentages();
        } else {
          abcInputs.forEach((input) => {
            input.setAttribute("disabled", true);
          });
          submitButton.disabled = false;
        }
      }
      
      function validateABCPercentages() {
        const inputs = document.querySelectorAll("#abcCustomization input");
        let total = 0;
        inputs.forEach((input) => {
          const value = parseFloat(input.value) || 0;
          total += value;
          input.classList.toggle("is-invalid", value < 0 || value > 100);
        });
        const sumAlert = document.getElementById("sumAlert");
        const isValid = Math.abs(total - 100) < 0.1;
        sumAlert.style.display = total > 0 ? "block" : "none";
        sumAlert.classList.toggle("alert-danger", !isValid);
        sumAlert.classList.toggle("alert-success", isValid);
        document.getElementById("totalSum").textContent = total.toFixed(1);
        return isValid;
      }
      
      document.querySelectorAll("#abcCustomization input").forEach((input) => {
        input.addEventListener("input", () => {
          const submitButton = document.querySelector('button[type="submit"]');
          if (document.getElementById("abcRadio").checked) {
            submitButton.disabled = !validateABCPercentages();
          } else {
            submitButton.disabled = false;
          }
        });
      });
      
      document.addEventListener("DOMContentLoaded", () => {
        toggleAnalysisType();
        document.querySelectorAll('input[name="analysisType"]').forEach((radio) => {
          radio.addEventListener("change", toggleAnalysisType);
        });
      });
      
      // Gestion de la soumission du formulaire
      document.querySelector("form").addEventListener("submit", function (e) {
        if (document.getElementById("abcRadio").checked) {
          const abcInputs = document.querySelectorAll("#abcCustomization input");
          const total = Array.from(abcInputs).reduce((sum, input) => sum + parseFloat(input.value || 0), 0);
          if (Math.abs(total - 100) >= 0.1) {
            e.preventDefault();
            alert("La somme des classes ABC doit être égale à 100%");
            return;
          }
        }
        const fileInput = document.getElementById("fileInput");
        if (fileInput.files.length > 0) {
          document.querySelectorAll("#inputRows input").forEach((input) => input.removeAttribute("name"));
        } else {
          if (!isDataConfirmed) {
            e.preventDefault();
            alert("Veuillez confirmer vos données manuelles avant de lancer l'analyse.");
            return;
          } else {
            document.querySelectorAll("#inputRows input").forEach((input) => (input.disabled = false));
          }
        }
      });
    </script>
  </body>
</html>
